1. C++和Lua之间一直围绕着栈在转，可见栈是极为重要的。
2. Lua C API中的主要操作:
  + 压入元素到栈里:
    - void lua_pushnil(lua_State *L);
	- void lua_pushboolean(lua_State *L, int bool);
	- void lua_pushnumber(lua_State *L, double n);
	- void lua_pushlstring(lua_State *L, const char*s, size_t length);
	- void lua_pushstring(lua_State *L, const char*s);
	- void lua_pushcfunction(lua_State *L, lua_CFunction fn);

  + 查询栈里的元素:
	- int lua_isnil(lua_State *L, int index);
	- int lua_isboolean(lua_State *L, int index);
	- int lua_isnumber(lua_State *L, int index);
	- int lua_isstring(lua_State *L, int index);
	- int lua_isfunction(lua_State *L, int index);
	- int lua_istable(lua_State *L, int index);
	- int lua_isuserdata(lua_State *L, int index);
	- int lua_islightuserdata(lua_State *L, int index);
	- int lua_isthread(lua_State *L, int index);

  + 转换栈里的元素:
	- int lua_toboolean(lua_State *L, int index);
	- double lua_tonumber(lua_State *L, int index);
	- const char* lua_tostring(lua_State *L, int index);
	- const char* lua_tolstring(lua_State *L, int index, size_t *len);
	- size_t lua_strlen(lua_State *L, int index);
	- lua_CFunction lua_tocfunction(lua_State *L, int index);
	- void * lua_touserdata(lua_State *L, int index);
	- void * lua_tothread(lua_State *L, int index);

  + Lua栈的维护
	- int lua_gettop(lua_State *L);
	- int lua_settop(lua_State *L, int index); // 如果index<0，则从栈顶往下数
	- int lua_pushvalue(lua_State *L, int index); 
	- int lua_remove(lua_State *L, int index); 
	- int lua_insert(lua_State *L, int index); 
	- int lua_replace(lua_State *L, int index); 
	- int lua_checkstack(lua_State *L, int extra);  // 确保堆栈上至少有extra个空位
	- int lua_pop(lua_State *L, int n);  // 从栈顶弹出n个元素
